

-------LOOPS------
SET SERVEROUTPUT ON;
DECLARE
    v_num NUMBER := 9;
BEGIN
 IF v_num < 10 THEN
 DBMS_OUTPUT.PUT_LINE('Inside The IF');
END IF;
 DBMS_OUTPUT.PUT_LINE('outside The IF');
END;
/

DECLARE
 v_website VARCHAR2(30) := 'RebellionRider.com';
 v_author VARCHAR2(30) := 'Manish';
BEGIN
 IF v_website ='RebellionRider.com' AND v_author= 'Manish' THEN
 DBMS_OUTPUT.PUT_LINE('Everything is Awesome :)');
END IF;
 DBMS_OUTPUT.PUT_LINE('Give this Video a Thumbs Up');
 END;
/

SET SERVEROUTPUT ON;
DECLARE
  v_num NUMBER := &enter_a_number;
BEGIN
 IF MOD (v_num, 2) = 0 THEN
 DBMS_OUTPUT.PUT_LINE (v_num || ' Is Even');
 ELSE
 DBMS_OUTPUT.PUT_LINE (v_num ||' is odd');
 END IF;
 DBMS_OUTPUT.PUT_LINE ('IF THEN ELSE Construct complete ');
END;
/

DECLARE
  v_Place VARCHAR2(30) := '&Enter Place';
 BEGIN
  IF v_Place = 'Metropolis' THEN
   DBMS_OUTPUT.PUT_LINE('This City Is Protected By Superman');
  ELSIF v_Place = 'Gotham' THEN
   DBMS_OUTPUT.PUT_LINE('This City is Protected By Batman');
  ELSIF v_Place = 'Amazon' THEN
   DBMS_OUTPUT.PUT_LINE('This City is protected by Wonder Woman');
  ELSE
   DBMS_OUTPUT.PUT_LINE('Please Call Avengers');
  END IF;
 DBMS_OUTPUT.PUT_LINE('Thanks For Contacting us');
 END;
/

DECLARE
  v_counter NUMBER :=0;
  v_result NUMBER;
 BEGIN
   LOOP
   v_counter := v_counter+1;
   v_result := 19*v_counter;
   DBMS_OUTPUT.PUT_LINE('19'||' x '||v_counter||' = '|| v_result);

   IF v_counter >=10 THEN
    EXIT;
   END IF;

  END LOOP;
 END;
/

DECLARE
  v_counter NUMBER :=0;
  v_result NUMBER;
 BEGIN
  LOOP
   v_counter := v_counter+1;
   v_result := 19*v_counter;
   DBMS_OUTPUT.PUT_LINE('19'||' x '||v_counter||' = '|| v_result);

   EXIT WHEN i_counter>=10;

  END LOOP;
 END;
/

DECLARE
  v_counter NUMBER :=1;
  v_result NUMBER ;
 BEGIN
   WHILE v_counter <= 10
  LOOP
   v_result := 9 *v_counter;
   DBMS_OUTPUT.PUT_LINE('9'||' x '||v_counter||' = '||v_result);
   v_counter := v_counter+1;
   END LOOP;
   DBMS_OUTPUT.PUT_LINE('out');
 END;
 /

DECLARE
  v_test BOOLEAN := TRUE;
  v_counter NUMBER := 0;
 BEGIN
  WHILE v_test LOOP
   v_counter := v_counter+1;
   DBMS_OUTPUT.PUT_LINE( v_counter );
   IF v_counter = 10 THEN
     v_test := FALSE;
   END IF;
  END LOOP;
  DBMS_OUTPUT.PUT_LINE ('This Statement is outside the loop and will always execute');
 END;
 /

DECLARE
  v_test BOOLEAN := TRUE;
  v_counter NUMBER :=1;
  v_result NUMBER;
 BEGIN
  WHILE v_test LOOP
   v_result := 19 * v_counter;
   DBMS_OUTPUT.PUT_LINE('19'||' x '||v_counter||' = '||v_result);
   -- Loop Termination Code
   IF v_counter =10 THEN
     v_test := FALSE;
   END IF;
   v_counter := v_counter +1;
  END LOOP;
  DBMS_OUTPUT.PUT_LINE('Outside the loop');
 END;
 /

SET SERVEROUTPUT ON;
 BEGIN
  FOR v_counter IN 1..10 LOOP
   DBMS_OUTPUT.PUT_LINE(v_counter);
  END LOOP;
 END;
/

BEGIN
  FOR v_counter IN REVERSE 1..10 LOOP
   DBMS_OUTPUT.PUT_LINE(v_counter);
  END LOOP;
 END;
 /
DECLARE
  v_result NUMBER;
 BEGIN
  FOR v_counter IN 1..10 LOOP
   v_result:= 19*v_counter;
   DBMS_OUTPUT.PUT_LINE(v_result);
  END LOOP;
 END;
 /

------TRIGGERS-------


CREATE [OR REPLACE] TRIGGER Ttrigger_name
 {BEFORE|AFTER} Triggering_event ON table_name
 [FOR EACH ROW]
 [FOLLOWS another_trigger_name]
 [ENABLE/DISABLE]
 [WHEN condition]
 DECLARE
  declaration statements
 BEGIN
  executable statements
 EXCEPTION
  exception-handling statements
 END;
/

CREATE TABLE superheroes (
  sh_name VARCHAR2 (15)
);

CREATE OR REPLACE TRIGGER bi_Superheroes
 BEFORE INSERT ON superheroes
 FOR EACH ROW
 ENABLE
 DECLARE
  v_user VARCHAR2 (15);
 BEGIN
  SELECT user INTO v_user FROM dual;
  DBMS_OUTPUT.PUT_LINE('You Just Inserted a Row Mr.'|| v_user);
 END;
 /

CREATE OR REPLACE TRIGGER tr_superheroes
 BEFORE INSERT OR DELETE OR UPDATE ON superheroes
 FOR EACH ROW
 ENABLE
 DECLARE
  v_user VARCHAR2(15);
 BEGIN
 SELECT
  user INTO v_user FROM dual;
 IF INSERTING THEN
  DBMS_OUTPUT.PUT_LINE('one line inserted by '||v_user);
 ELSIF DELETING THEN
  DBMS_OUTPUT.PUT_LINE('one line Deleted by '||v_user);
 ELSIF UPDATING THEN
  DBMS_OUTPUT.PUT_LINE('one line Updated by '||v_user);
 END IF;
 END;
 /

 CREATE TABLE  sh_audit (
  new_name   varchar2(30),
  old_name   varchar2(30),
  user_name   varchar2(30),
  entry_date   varchar2(30),
  operation   varchar2(30)
);

CREATE  OR  REPLACE  TRIGGER  superheroes_audit
 BEFORE  INSERT  OR DELETE  OR UPDATE  ON  superheroes
 FOR EACH ROW
 ENABLE
 DECLARE
  v_user  varchar2 (30);
  v_date  varchar2(30);
 BEGIN
  SELECT user, TO_CHAR(sysdate, 'DD/MON/YYYY HH24:MI:SS') INTO v_user, v_date FROM dual;

  IF INSERTING THEN
   INSERT INTO sh_audit (new_name,old_name, user_name, entry_date, operation)
   VALUES(:NEW.SH_NAME, Null , v_user, v_date, 'Insert');

  ELSIF DELETING THEN
   INSERT INTO sh_audit (new_name,old_name, user_name, entry_date, operation)
   VALUES(NULL,:OLD.SH_NAME, v_user, v_date, 'Delete');

  ELSIF UPDATING THEN
   INSERT INTO sh_audit (new_name,old_name, user_name, entry_date, operation)
   VALUES(:NEW.SH_NAME, :OLD.SH_NAME, v_user, v_date,'Update');
  END IF;
 END;
 /

 CREATE TABLE  superheroes(
  Sh_name  VARCHAR2(30)
 );

CREATE TABLE superheroes_backup
 AS
 SELECT * FROM superheroes WHERE 1=2;

CREATE or REPLACE trigger Sh_Backup
 BEFORE INSERT OR DELETE OR UPDATE ON superheroes
 FOR EACH ROW
 ENABLE
 BEGIN
  IF INSERTING THEN
   INSERT INTO superheroes_backup (SH_NAME) VALUES (:NEW.SH_NAME);
  ELSIF DELETING THEN
   DELETE FROM superheroes_backup WHERE SH_NAME =:old.sh_name;
  ELSIF UPDATING THEN
   UPDATE superheroes_backup
   SET SH_NAME =:new.sh_name WHERE SH_NAME =:old.sh_name;
  END IF;
 END;
 /


 CREATE TABLE schema_audit
 (
  ddl_date      DATE,
  ddl_user      VARCHAR2(15),
  object_created    VARCHAR2(15),
  object_name     VARCHAR2(15),
  ddl_operation    VARCHAR2(15)
);

CREATE OR REPLACE TRIGGER hr_audit_tr
 AFTER DDL ON SCHEMA
 BEGIN
  INSERT INTO schema_audit VALUES
  (
   sysdate,
   sys_context('USERENV','CURRENT_USER'),
   ora_dict_obj_type,
   ora_dict_obj_name,
   ora_sysevent
  );
 END;
 /

CREATE OR REPLACE TRIGGER db_audit_tr
 AFTER DDL ON DATABASE
 BEGIN
  INSERT INTO schema_audit VALUES
  (
   sysdate,
   sys_context('USERENV','CURRENT_USER'),
   ora_dict_obj_type,
   ora_dict_obj_name,
   ora_sysevent
  );
 END;
 /

CREATE TABLE hr_evnt_audit
 (
  event_type VARCHAR2(30),
  logon_date DATE,
  logon_time VARCHAR2(15),
  logof_date DATE,
  logof_time VARCHAR2(15)
 );
CREATE OR REPLACE TRIGGER hr_lgon_audit
 AFTER LOGON ON SCHEMA
 BEGIN
  INSERT INTO hr_evnt_audit VALUES(
   ora_sysevent,
   sysdate,
   TO_CHAR(sysdate, 'hh24:mi:ss'),
   NULL,
   NULL
  );
  COMMIT;
 END;
 /
CREATE TABLE hr_evnt_audit
 (
  event_type VARCHAR2(30),
  logon_date DATE,
  logon_time VARCHAR2(15),
  logof_date DATE,
  logof_time VARCHAR2(15)
 );
CREATE OR REPLACE TRIGGER log_off_audit
 BEFORE LOGOFF ON SCHEMA
 BEGIN
  INSERT INTO hr_evnt_audit VALUES
  (
   ora_sysevent,
   NULL,
   NULL,
   SYSDATE,
   TO_CHAR(sysdate, 'hh24:mi:ss')
  );
  COMMIT;
 END;
 /

 CREATE TABLE db_evnt_audit
 (
  User_name VARCHAR2(15),
  event_type VARCHAR2(30),
  logon_date DATE,
  logon_time VARCHAR2(15),
  logof_date DATE,
  logof_time VARCHAR2(15)
 );
 CREATE OR REPLACE TRIGGER db_lgof_audit
 BEFORE LOGOFF ON DATABASE
 BEGIN
  INSERT INTO db_evnt_audit
  VALUES
  (
   user,
   ora_sysevent,
   NULL,
   NULL,
   SYSDATE,
   TO_CHAR(sysdate, 'hh24:mi:ss')
  );
 END;
 /

CREATE TABLE startup_audit
 (
  Event_type VARCHAR2(15),
  event_date DATE,
  event_time VARCHAR2(15)
 );

CREATE OR REPLACE TRIGGER startup_audit
 AFTER STARTUP ON DATABASE
 BEGIN
  INSERT INTO startup_audit VALUES
  (
   ora_sysevent,
   SYSDATE,
   TO_CHAR(sysdate, 'hh24:mm:ss')
  );
 END;
 /

CREATE OR REPLACE TRIGGER tr_shutdown_audit
 BEFORE SHUTDOWN ON DATABASE
 BEGIN
  INSERT INTO startup_audit VALUES
  (
   ora_sysevent,
   SYSDATE,
   TO_CHAR(sysdate, 'hh24:mm:ss')
  );
 END;
 /

CREATE OR REPLACE TRIGGER before_shutdown
 BEFORE SHUTDOWN ON DATABASE
 BEGIN
  gather_system_stats;
 END;
 /

-----CURSOR--------
 SET SERVEROUTPUT ON;
 DECLARE
  v_name VARCHAR2(30);
  --Declare Cursor
  CURSOR  cur_RebellionRider  IS
  SELECT  first_name  FROM  EMPLOYEES
  WHERE  employee_id  <  105;
 BEGIN
  OPEN cur_RebellionRider;
  LOOP
   FETCH cur_RebellionRider INTO v_name;
   DBMS_OUTPUT.PUT_LINE (v_name);
   EXIT WHEN cur_RebellionRider%NOTFOUND;
  END LOOP;--Simple Loop End
  CLOSE cur_RebellionRider;
 END;
 /
